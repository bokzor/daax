<?php

/**
 * BaseCommande
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $server_id
 * @property integer $table_id
 * @property integer $client_id
 * @property integer $statut_id
 * @property float $total_commande
 * @property float $total_prix_achat
 * @property sfGuardUser $Server
 * @property sfGuardUser $Client
 * @property Doctrine_Collection $Articles
 * @property StatutCommande $StatutCommande
 * @property Doctrine_Collection $ArticleCommande
 * @property Doctrine_Collection $CommandesTransaction
 * @property Doctrine_Collection $Transaction
 * 
 * @method integer             getServerId()             Returns the current record's "server_id" value
 * @method integer             getTableId()              Returns the current record's "table_id" value
 * @method integer             getClientId()             Returns the current record's "client_id" value
 * @method integer             getStatutId()             Returns the current record's "statut_id" value
 * @method float               getTotalCommande()        Returns the current record's "total_commande" value
 * @method float               getTotalPrixAchat()       Returns the current record's "total_prix_achat" value
 * @method sfGuardUser         getServer()               Returns the current record's "Server" value
 * @method sfGuardUser         getClient()               Returns the current record's "Client" value
 * @method Doctrine_Collection getArticles()             Returns the current record's "Articles" collection
 * @method StatutCommande      getStatutCommande()       Returns the current record's "StatutCommande" value
 * @method Doctrine_Collection getArticleCommande()      Returns the current record's "ArticleCommande" collection
 * @method Doctrine_Collection getCommandesTransaction() Returns the current record's "CommandesTransaction" collection
 * @method Doctrine_Collection getTransaction()          Returns the current record's "Transaction" collection
 * @method Commande            setServerId()             Sets the current record's "server_id" value
 * @method Commande            setTableId()              Sets the current record's "table_id" value
 * @method Commande            setClientId()             Sets the current record's "client_id" value
 * @method Commande            setStatutId()             Sets the current record's "statut_id" value
 * @method Commande            setTotalCommande()        Sets the current record's "total_commande" value
 * @method Commande            setTotalPrixAchat()       Sets the current record's "total_prix_achat" value
 * @method Commande            setServer()               Sets the current record's "Server" value
 * @method Commande            setClient()               Sets the current record's "Client" value
 * @method Commande            setArticles()             Sets the current record's "Articles" collection
 * @method Commande            setStatutCommande()       Sets the current record's "StatutCommande" value
 * @method Commande            setArticleCommande()      Sets the current record's "ArticleCommande" collection
 * @method Commande            setCommandesTransaction() Sets the current record's "CommandesTransaction" collection
 * @method Commande            setTransaction()          Sets the current record's "Transaction" collection
 * 
 * @package    LiveOrder
 * @subpackage model
 * @author     Adrien Bokor <adrien@bokor.be>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCommande extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('commande');
        $this->hasColumn('server_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('table_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('client_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('statut_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('total_commande', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('total_prix_achat', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as Server', array(
             'local' => 'server_id',
             'foreign' => 'id'));

        $this->hasOne('sfGuardUser as Client', array(
             'local' => 'client_id',
             'foreign' => 'id'));

        $this->hasMany('Article as Articles', array(
             'refClass' => 'ArticleCommande',
             'local' => 'commande_id',
             'foreign' => 'article_id'));

        $this->hasOne('StatutCommande', array(
             'local' => 'statut_id',
             'foreign' => 'id'));

        $this->hasMany('ArticleCommande', array(
             'local' => 'id',
             'foreign' => 'commande_id'));

        $this->hasMany('CommandesTransaction', array(
             'local' => 'id',
             'foreign' => 'commande_id'));

        $this->hasMany('Transaction', array(
             'refClass' => 'CommandesTransaction',
             'local' => 'commande_id',
             'foreign' => 'transaction_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}