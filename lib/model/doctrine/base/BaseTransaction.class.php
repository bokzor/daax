<?php

/**
 * BaseTransaction
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $server_id
 * @property integer $client_id
 * @property integer $cash
 * @property integer $cb
 * @property integer $cashback
 * @property integer $ecb
 * @property integer $statut
 * @property sfGuardUser $Server
 * @property sfGuardUser $Client
 * @property Doctrine_Collection $Commandes
 * @property Doctrine_Collection $CommandesTransaction
 * 
 * @method integer             getServerId()             Returns the current record's "server_id" value
 * @method integer             getClientId()             Returns the current record's "client_id" value
 * @method integer             getCash()                 Returns the current record's "cash" value
 * @method integer             getCb()                   Returns the current record's "cb" value
 * @method integer             getCashback()             Returns the current record's "cashback" value
 * @method integer             getEcb()                  Returns the current record's "ecb" value
 * @method integer             getStatut()               Returns the current record's "statut" value
 * @method sfGuardUser         getServer()               Returns the current record's "Server" value
 * @method sfGuardUser         getClient()               Returns the current record's "Client" value
 * @method Doctrine_Collection getCommandes()            Returns the current record's "Commandes" collection
 * @method Doctrine_Collection getCommandesTransaction() Returns the current record's "CommandesTransaction" collection
 * @method Transaction         setServerId()             Sets the current record's "server_id" value
 * @method Transaction         setClientId()             Sets the current record's "client_id" value
 * @method Transaction         setCash()                 Sets the current record's "cash" value
 * @method Transaction         setCb()                   Sets the current record's "cb" value
 * @method Transaction         setCashback()             Sets the current record's "cashback" value
 * @method Transaction         setEcb()                  Sets the current record's "ecb" value
 * @method Transaction         setStatut()               Sets the current record's "statut" value
 * @method Transaction         setServer()               Sets the current record's "Server" value
 * @method Transaction         setClient()               Sets the current record's "Client" value
 * @method Transaction         setCommandes()            Sets the current record's "Commandes" collection
 * @method Transaction         setCommandesTransaction() Sets the current record's "CommandesTransaction" collection
 * 
 * @package    LiveOrder
 * @subpackage model
 * @author     Adrien Bokor <adrien@bokor.be>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTransaction extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('transaction');
        $this->hasColumn('server_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('client_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('cash', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('cb', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('cashback', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('ecb', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('statut', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as Server', array(
             'local' => 'server_id',
             'foreign' => 'id'));

        $this->hasOne('sfGuardUser as Client', array(
             'local' => 'client_id',
             'foreign' => 'id'));

        $this->hasMany('Commande as Commandes', array(
             'refClass' => 'CommandesTransaction',
             'local' => 'transaction_id',
             'foreign' => 'commande_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('CommandesTransaction', array(
             'local' => 'id',
             'foreign' => 'transaction_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}