<?php

/**
 * BaseCloture
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $nb_transaction_cash
 * @property integer $nb_transaction_cb
 * @property integer $nb_transaction_ecb
 * @property integer $total_transaction_cash
 * @property integer $total_transaction_cb
 * @property integer $total_transaction_ecb
 * @property integer $id_user_record
 * @property integer $total_record
 * @property integer $server_id
 * @property sfGuardUser $ServerRecord
 * @property sfGuardUser $ServerCloture
 * 
 * @method integer     getNbTransactionCash()      Returns the current record's "nb_transaction_cash" value
 * @method integer     getNbTransactionCb()        Returns the current record's "nb_transaction_cb" value
 * @method integer     getNbTransactionEcb()       Returns the current record's "nb_transaction_ecb" value
 * @method integer     getTotalTransactionCash()   Returns the current record's "total_transaction_cash" value
 * @method integer     getTotalTransactionCb()     Returns the current record's "total_transaction_cb" value
 * @method integer     getTotalTransactionEcb()    Returns the current record's "total_transaction_ecb" value
 * @method integer     getIdUserRecord()           Returns the current record's "id_user_record" value
 * @method integer     getTotalRecord()            Returns the current record's "total_record" value
 * @method integer     getServerId()               Returns the current record's "server_id" value
 * @method sfGuardUser getServerRecord()           Returns the current record's "ServerRecord" value
 * @method sfGuardUser getServerCloture()          Returns the current record's "ServerCloture" value
 * @method Cloture     setNbTransactionCash()      Sets the current record's "nb_transaction_cash" value
 * @method Cloture     setNbTransactionCb()        Sets the current record's "nb_transaction_cb" value
 * @method Cloture     setNbTransactionEcb()       Sets the current record's "nb_transaction_ecb" value
 * @method Cloture     setTotalTransactionCash()   Sets the current record's "total_transaction_cash" value
 * @method Cloture     setTotalTransactionCb()     Sets the current record's "total_transaction_cb" value
 * @method Cloture     setTotalTransactionEcb()    Sets the current record's "total_transaction_ecb" value
 * @method Cloture     setIdUserRecord()           Sets the current record's "id_user_record" value
 * @method Cloture     setTotalRecord()            Sets the current record's "total_record" value
 * @method Cloture     setServerId()               Sets the current record's "server_id" value
 * @method Cloture     setServerRecord()           Sets the current record's "ServerRecord" value
 * @method Cloture     setServerCloture()          Sets the current record's "ServerCloture" value
 * 
 * @package    LiveOrder
 * @subpackage model
 * @author     Adrien Bokor <adrien@bokor.be>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCloture extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('cloture');
        $this->hasColumn('nb_transaction_cash', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('nb_transaction_cb', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('nb_transaction_ecb', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('total_transaction_cash', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('total_transaction_cb', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('total_transaction_ecb', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('id_user_record', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('total_record', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('server_id', 'integer', null, array(
             'type' => 'integer',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as ServerRecord', array(
             'local' => 'id_user_record',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as ServerCloture', array(
             'local' => 'id_user_record',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}